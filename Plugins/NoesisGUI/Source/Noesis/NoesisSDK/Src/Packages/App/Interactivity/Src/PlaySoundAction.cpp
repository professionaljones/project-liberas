////////////////////////////////////////////////////////////////////////////////////////////////////
// NoesisGUI - http://www.noesisengine.com
// Copyright (c) 2013 Noesis Technologies S.L. All Rights Reserved.
////////////////////////////////////////////////////////////////////////////////////////////////////


#include <NsApp/PlaySoundAction.h>
#include <NsGui/DependencyData.h>
#include <NsGui/Storyboard.h>
#include <NsGui/IntegrationAPI.h>
#include <NsCore/TypeId.h>
#include <NsCore/ReflectionImplement.h>


using namespace NoesisApp;
using namespace Noesis;


////////////////////////////////////////////////////////////////////////////////////////////////////
PlaySoundAction::PlaySoundAction()
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////
PlaySoundAction::~PlaySoundAction()
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////
const Uri& PlaySoundAction::GetSource() const
{
    return GetValue<Uri>(SourceProperty);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
void PlaySoundAction::SetSource(const Uri& source)
{
    SetValue<Uri>(SourceProperty, source);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
float PlaySoundAction::GetVolume() const
{
    return GetValue<float>(VolumeProperty);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
void PlaySoundAction::SetVolume(float volume)
{
    SetValue<float>(VolumeProperty, volume);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
Ptr<Freezable> PlaySoundAction::CreateInstanceCore() const
{
    return *new PlaySoundAction();
}

////////////////////////////////////////////////////////////////////////////////////////////////////
void PlaySoundAction::Invoke(Noesis::BaseComponent*)
{
    const char* source = GetSource().Get();
    if (GetAssociatedObject() != 0 && !String::IsNullOrEmpty(source))
    {
        GUI::PlaySound(source, GetVolume());
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////
NS_BEGIN_COLD_REGION

NS_IMPLEMENT_REFLECTION(PlaySoundAction)
{
    NsMeta<TypeId>("NoesisApp.PlaySoundAction");

    DependencyData* data = NsMeta<DependencyData>(TypeOf<SelfClass>());
    data->RegisterProperty<Uri>(SourceProperty, "Source", PropertyMetadata::Create(Uri()));
    data->RegisterProperty<float>(VolumeProperty, "Volume", PropertyMetadata::Create(0.5f));
}

////////////////////////////////////////////////////////////////////////////////////////////////////
const DependencyProperty* PlaySoundAction::SourceProperty;
const DependencyProperty* PlaySoundAction::VolumeProperty;
